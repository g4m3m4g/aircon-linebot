const {
  addCustomerRecordToMongo,
  updateCustomerByNameAndDate,
  getCustomerById,
} = require("../services/customerService");

const {
  buildFlexUpdateConfirmation,
} = require("../utils/flexUpdateConfirmationBuilder");

module.exports = async function handlePostback(event, client) {
  let postbackData;
  try {
    postbackData = JSON.parse(event.postback.data);
    // console.log("üìå postbackData:", postbackData);
    // console.log("üìå newData:", postbackData.newData);
  } catch (err) {
    console.error("‚ùå Error parsing postback data:", err);
    return client.pushMessage(event.source.userId, {
      type: "text",
      text: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
    });
  }

  // --------- Confirm New Customer ---------
  if (postbackData.action === "confirm") {
    const rawData = postbackData.customerData;
    if (!rawData || !rawData.name) {
      return client.pushMessage(event.source.userId, {
        type: "text",
        text: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö",
      });
    }

    const customerData = {
      ...rawData,
      quantity: rawData.quantity ? Number(rawData.quantity) : 0,
      name: rawData.name || "",
      phone: rawData.phone || "",
      address: rawData.address || "",
      ac_type: rawData.ac_type || "‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤",
      clean_type: rawData.clean_type || "‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏Å‡∏ï‡∏¥",
      appointment_date: rawData.appointment_date || "",
      appointment_time: rawData.appointment_time || "",
      status: rawData.status || "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    };

    await client.pushMessage(event.source.userId, {
      type: "text",
      text: "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...",
    });

    try {
      await addCustomerRecordToMongo(customerData);
      return client.pushMessage(event.source.userId, {
        type: "text",
        text: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      });
    } catch (err) {
      console.error("Error saving to DB:", err);
      return client.pushMessage(event.source.userId, {
        type: "text",
        text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      });
    }
  }

  // --------- Confirm Update Customer ---------
  if (postbackData.action === "confirm_update") {
    const { customerId, newData: rawNewData } = postbackData;

    if (!customerId || !rawNewData) {
      return client.pushMessage(event.source.userId, {
        type: "text",
        text: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å DB
    const oldData = await getCustomerById(customerId);
    if (!oldData) {
      return client.pushMessage(event.source.userId, {
        type: "text",
        text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á newData ‡πÇ‡∏î‡∏¢ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å
    const newData = {
      ...oldData.toObject(),
      ...rawNewData,
      quantity: rawNewData.quantity
        ? Number(rawNewData.quantity)
        : oldData.quantity,
      name: rawNewData.name || oldData.name,
      phone: rawNewData.phone || oldData.phone,
      address: rawNewData.address || oldData.address,
      ac_type: rawNewData.ac_type || oldData.ac_type,
      clean_type: rawNewData.clean_type || oldData.clean_type,
      appointment_date: rawNewData.appointment_date || oldData.appointment_date,
      appointment_time: rawNewData.appointment_time || oldData.appointment_time,
      status: rawNewData.status || oldData.status,
    };

    await client.pushMessage(event.source.userId, {
      type: "text",
      text: "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...",
    });

    try {
      const updatedCustomer = await updateCustomerByNameAndDate(
        oldData.name,
        oldData.appointment_date,
        newData
      );

      if (!updatedCustomer) {
        return client.pushMessage(event.source.userId, {
          type: "text",
          text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ`,
        });
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô + flex summary
      const flexMessage = buildFlexUpdateConfirmation(oldData, newData);
      return client.pushMessage(event.source.userId, [
        { type: "text", text: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" },
      ]);
    } catch (err) {
      console.error("Error updating customer:", err);
      return client.pushMessage(event.source.userId, {
        type: "text",
        text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      });
    }
  }

  // --------- Cancel ---------
  if (postbackData.action === "cancel") {
    return client.pushMessage(event.source.userId, {
      type: "text",
      text: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    });
  }

  return Promise.resolve(null);
};
